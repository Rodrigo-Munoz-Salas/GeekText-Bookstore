// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wishlist_books.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addBookToWishlist = `-- name: AddBookToWishlist :one
INSERT INTO wishlist_books (id, wishlist_id, book_id)
VALUES ($1, $2, $3)
ON CONFLICT (wishlist_id, book_id) DO NOTHING
RETURNING id, wishlist_id, book_id
`

type AddBookToWishlistParams struct {
	ID         uuid.UUID
	WishlistID uuid.UUID
	BookID     uuid.UUID
}

func (q *Queries) AddBookToWishlist(ctx context.Context, arg AddBookToWishlistParams) (WishlistBook, error) {
	row := q.db.QueryRowContext(ctx, addBookToWishlist, arg.ID, arg.WishlistID, arg.BookID)
	var i WishlistBook
	err := row.Scan(&i.ID, &i.WishlistID, &i.BookID)
	return i, err
}

const deleteBookFromWishlist = `-- name: DeleteBookFromWishlist :exec
DELETE FROM wishlist_books WHERE wishlist_id = $1 AND book_id = $2
`

type DeleteBookFromWishlistParams struct {
	WishlistID uuid.UUID
	BookID     uuid.UUID
}

func (q *Queries) DeleteBookFromWishlist(ctx context.Context, arg DeleteBookFromWishlistParams) error {
	_, err := q.db.ExecContext(ctx, deleteBookFromWishlist, arg.WishlistID, arg.BookID)
	return err
}

const getBookToDelete = `-- name: GetBookToDelete :one
SELECT 1 FROM wishlist_books WHERE wishlist_id = $1 AND book_id = $2 LIMIT 1
`

type GetBookToDeleteParams struct {
	WishlistID uuid.UUID
	BookID     uuid.UUID
}

func (q *Queries) GetBookToDelete(ctx context.Context, arg GetBookToDeleteParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, getBookToDelete, arg.WishlistID, arg.BookID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getWishlistBooksByWishlistID = `-- name: GetWishlistBooksByWishlistID :many
SELECT b.id, b.isbn, b.title, b.description, b.price, b.genre, b.publisher_id, b.year_published, b.copies_sold
FROM books b
JOIN wishlist_books wb ON b.id = wb.book_id
WHERE wb.wishlist_id = $1
`

func (q *Queries) GetWishlistBooksByWishlistID(ctx context.Context, wishlistID uuid.UUID) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getWishlistBooksByWishlistID, wishlistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Isbn,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Genre,
			&i.PublisherID,
			&i.YearPublished,
			&i.CopiesSold,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
