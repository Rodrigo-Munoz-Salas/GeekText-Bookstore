// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wishlists.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const countUserWishlists = `-- name: CountUserWishlists :one
SELECT COUNT(*) FROM wishlists WHERE user_id = $1
`

func (q *Queries) CountUserWishlists(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserWishlists, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createWishlist = `-- name: CreateWishlist :one
INSERT INTO wishlists (id, user_id, list_name)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, list_name) DO NOTHING
RETURNING id, user_id, list_name
`

type CreateWishlistParams struct {
	ID       uuid.UUID
	UserID   uuid.UUID
	ListName string
}

func (q *Queries) CreateWishlist(ctx context.Context, arg CreateWishlistParams) (Wishlist, error) {
	row := q.db.QueryRowContext(ctx, createWishlist, arg.ID, arg.UserID, arg.ListName)
	var i Wishlist
	err := row.Scan(&i.ID, &i.UserID, &i.ListName)
	return i, err
}

const getUserIDByWishlistID = `-- name: GetUserIDByWishlistID :one
SELECT user_id FROM wishlists WHERE id = $1
`

func (q *Queries) GetUserIDByWishlistID(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByWishlistID, id)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
