// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: books.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const applyDiscountToPublisher = `-- name: ApplyDiscountToPublisher :exec
UPDATE books 
SET price = price * (1 - $1::FLOAT8) 
WHERE publisher_id = $2::UUID
`

type ApplyDiscountToPublisherParams struct {
	DiscountPercent float64
	PublisherID     uuid.UUID
}

func (q *Queries) ApplyDiscountToPublisher(ctx context.Context, arg ApplyDiscountToPublisherParams) error {
	_, err := q.db.ExecContext(ctx, applyDiscountToPublisher, arg.DiscountPercent, arg.PublisherID)
	return err
}

const getBooksByGenre = `-- name: GetBooksByGenre :many
SELECT id, title, description, price, genre, publisher_id, year_published 
FROM books 
WHERE genre = $1
`

type GetBooksByGenreRow struct {
	ID            uuid.UUID
	Title         string
	Description   sql.NullString
	Price         string
	Genre         string
	PublisherID   uuid.NullUUID
	YearPublished int32
}

func (q *Queries) GetBooksByGenre(ctx context.Context, genre string) ([]GetBooksByGenreRow, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByGenre, genre)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBooksByGenreRow
	for rows.Next() {
		var i GetBooksByGenreRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Genre,
			&i.PublisherID,
			&i.YearPublished,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByRating = `-- name: GetBooksByRating :many
SELECT b.id, b.title, b.description, b.price, b.genre, b.publisher_id, b.year_published, AVG(r.rating) AS average_rating
FROM books b
JOIN ratings r ON b.id = r.book_id
GROUP BY b.id
HAVING AVG(r.rating) >= $1
`

type GetBooksByRatingRow struct {
	ID            uuid.UUID
	Title         string
	Description   sql.NullString
	Price         string
	Genre         string
	PublisherID   uuid.NullUUID
	YearPublished int32
	AverageRating float64
}

func (q *Queries) GetBooksByRating(ctx context.Context, rating int32) ([]GetBooksByRatingRow, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByRating, rating)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBooksByRatingRow
	for rows.Next() {
		var i GetBooksByRatingRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Genre,
			&i.PublisherID,
			&i.YearPublished,
			&i.AverageRating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopSellingBooks = `-- name: GetTopSellingBooks :many
SELECT b.id, b.title, b.description, b.price, b.genre, b.publisher_id, b.year_published 
FROM books b
JOIN book_authors ba ON b.id = ba.book_id
JOIN authors a ON ba.author_id = a.id
ORDER BY b.year_published DESC
LIMIT 10
`

type GetTopSellingBooksRow struct {
	ID            uuid.UUID
	Title         string
	Description   sql.NullString
	Price         string
	Genre         string
	PublisherID   uuid.NullUUID
	YearPublished int32
}

func (q *Queries) GetTopSellingBooks(ctx context.Context) ([]GetTopSellingBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopSellingBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopSellingBooksRow
	for rows.Next() {
		var i GetTopSellingBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Genre,
			&i.PublisherID,
			&i.YearPublished,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
