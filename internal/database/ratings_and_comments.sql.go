// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ratings_and_comments.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (id, book_id, comment, user_id, created_at)
VALUES ($1, $2, $3, $4, NOW())
RETURNING id, user_id, book_id, comment, created_at
`

type CreateCommentParams struct {
	ID      uuid.UUID
	BookID  uuid.UUID
	Comment string
	UserID  uuid.UUID
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.ID,
		arg.BookID,
		arg.Comment,
		arg.UserID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const createRating = `-- name: CreateRating :one
INSERT INTO ratings (id, book_id, rating, user_id, created_at)
VALUES ($1, $2, $3, $4, NOW())
RETURNING id, user_id, book_id, rating, created_at
`

type CreateRatingParams struct {
	ID     uuid.UUID
	BookID uuid.UUID
	Rating int32
	UserID uuid.UUID
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, createRating,
		arg.ID,
		arg.BookID,
		arg.Rating,
		arg.UserID,
	)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const getAveRatingByBook = `-- name: GetAveRatingByBook :one
SELECT COALESCE(AVG(rating), 0) AS average_rating
FROM ratings 
WHERE book_id = $1
`

func (q *Queries) GetAveRatingByBook(ctx context.Context, bookID uuid.UUID) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getAveRatingByBook, bookID)
	var average_rating interface{}
	err := row.Scan(&average_rating)
	return average_rating, err
}

const getCommentsByBook = `-- name: GetCommentsByBook :many
SELECT id, book_id, comment, user_id, created_at
FROM comments
WHERE book_id = $1
ORDER BY created_at DESC
`

type GetCommentsByBookRow struct {
	ID        uuid.UUID
	BookID    uuid.UUID
	Comment   string
	UserID    uuid.UUID
	CreatedAt time.Time
}

func (q *Queries) GetCommentsByBook(ctx context.Context, bookID uuid.UUID) ([]GetCommentsByBookRow, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByBook, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByBookRow
	for rows.Next() {
		var i GetCommentsByBookRow
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.Comment,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
